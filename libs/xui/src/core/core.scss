@use 'sass:map';

@mixin core() {
  * {
    box-sizing: border-box;
    text-rendering: optimizeLegibility;
    overscroll-behavior: none;
  }

  .xui-no-user-select {
    user-select: none;
  }

  a {
    text-decoration: none;

    &:hover {
      text-decoration: underline;
    }
  }

  .xui-disabled-filter {
    filter: grayscale(0.3) brightness(0.8) opacity(0.5);
  }

  a,
  abbr,
  acronym,
  address,
  applet,
  big,
  blockquote,
  body,
  button,
  caption,
  cite,
  code,
  dd,
  del,
  dfn,
  div,
  dl,
  dt,
  em,
  fieldset,
  form,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  html,
  iframe,
  img,
  input,
  ins,
  kbd,
  label,
  legend,
  li,
  object,
  ol,
  p,
  pre,
  q,
  s,
  samp,
  small,
  span,
  strike,
  strong,
  sub,
  sup,
  table,
  tbody,
  td,
  tfoot,
  th,
  thead,
  tr,
  tt,
  ul,
  var {
    margin: 0;
    padding: 0;
    border: 0;
    outline: 0;
    vertical-align: baseline;
  }
}

@function get-palette($theme, $palette) {
  $c: map.get($theme, color);

  @if not map.has-key($c, $palette) {
    @error 'Palette "' + $palette + '" does not exist in color scheme. Available palettes are: ' + map.keys($c);
  }

  @return map.get($c, $palette);
}

@function get-color($theme, $palette, $color: default) {
  $palette: get-palette($theme, $palette);

  @if not map.has-key($palette, $color) {
    @error 'Color "' + $color + '" does not exist in palette. Available colors are: ' + map.keys($palette);
  }

  @return map.get($palette, $color);
}

@function get-elevation($theme, $elevation) {
  $e: map.get($theme, elevation);
  @return map.get($e, $elevation);
}
