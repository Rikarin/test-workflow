@use 'sass:map';
@use 'xui.theme' as theme;
@use '../core/core';
@use '../core/typography';

@function _get-color-from-palette($palette, $hue) {
  @if map.has-key($palette, $hue) {
    @return map.get($palette, $hue);
  }

  @error 'Hue "' + $hue + '" does not exist in palette. Available hues are: ' + map.keys($palette);
}

@function get-contrast-color-from-palette($palette, $hue) {
  @return map.get(map.get($palette, contrast), $hue);
}

@function define-palette($base-palette, $default: 500, $lighter: 100, $darker: 700, $text: $default) {
  $result: map.merge(
    $base-palette,
    (
      default: _get-color-from-palette($base-palette, $default),
      lighter: _get-color-from-palette($base-palette, $lighter),
      darker: _get-color-from-palette($base-palette, $darker),
      text: _get-color-from-palette($base-palette, $text),
      default-contrast: get-contrast-color-from-palette($base-palette, $default),
      lighter-contrast: get-contrast-color-from-palette($base-palette, $lighter),
      darker-contrast: get-contrast-color-from-palette($base-palette, $darker)
    )
  );

  @each $hue, $color in $base-palette {
    @if type-of($hue) == number {
      $result: map.merge(
        $result,
        (
          '#{$hue}-contrast': get-contrast-color-from-palette($base-palette, $hue)
        )
      );
    }
  }

  @return $result;
}

@function define-dark-theme($theme) {
  $color: map.get($theme, color);
  $typography: map.get($theme, typography);
  $elevation: map.get($theme, elevation);

  $primary: map.get($color, primary);

  $color: map.merge(
    $color,
    (
      primary-alt: map.get($color, primary-alt) or map.get($primary, 700),
      info: map.get($color, info) or define-palette(theme.$blue-palette),
      success: map.get($color, success) or define-palette(theme.$green-palette),
      warning: map.get($color, warning) or define-palette(theme.$orange-palette),
      error: map.get($color, error) or define-palette(theme.$red-palette),
      background: map.get($color, background) or theme.$background-palette
    )
  );

  @return (
    color: $color,
    typography: $typography or typography.define-typography-config(),
    elevation: $elevation or theme.$default-elevation
  );
}

@mixin create-variables($theme) {
  $colors: map.get($theme, color);

  @each $name, $palette in $colors {
    @each $weight, $value in $palette {
      @if type-of($value) != map {
        --#{$name}-color-#{$weight}: #{$value};
      }
    }
  }
}
