@use 'sass:map';
@use 'palettes';

@function _get-color-from-palette($palette, $hue) {
  @if map.has-key($palette, $hue) {
    @return map.get($palette, $hue);
  }

  @error 'Hue "' + $hue + '" does not exist in palette. Available hues are: ' + map.keys($palette);
}

@function get-contrast-color-from-palette($palette, $hue) {
  @return map.get(map.get($palette, contrast), $hue);
}

@function define-palette($base-palette, $default: 500, $lighter: 100, $darker: 700, $text: $default) {
  $result: map.merge(
    $base-palette,
    (
      default: _get-color-from-palette($base-palette, $default),
      lighter: _get-color-from-palette($base-palette, $lighter),
      darker: _get-color-from-palette($base-palette, $darker),
      text: _get-color-from-palette($base-palette, $text),
      default-contrast: get-contrast-color-from-palette($base-palette, $default),
      lighter-contrast: get-contrast-color-from-palette($base-palette, $lighter),
      darker-contrast: get-contrast-color-from-palette($base-palette, $darker)
    )
  );

  @each $hue, $color in $base-palette {
    @if type-of($hue) == number {
      $result: map.merge(
        $result,
        (
          '#{$hue}-contrast': get-contrast-color-from-palette($base-palette, $hue)
        )
      );
    }
  }

  @return $result;
}

@function set-default($theme, $name, $palette) {
  @return map.merge(
    $theme,
    (
      $name: define-palette($palette)
    )
  );
}

@function define-dark-theme($theme) {
  $primary: map.get($theme, primary);

  @if map.get($theme, primary-alt) == null {
    $theme: map.merge(
      $theme,
      (
        primary-alt: map.get($primary, 700)
      )
    );
  }

  @if map.get($theme, information) == null {
    $theme: set-default($theme, information, palettes.$blue-palette);
  }

  @if map.get($theme, success) == null {
    $theme: set-default($theme, success, palettes.$green-palette);
  }

  @if map.get($theme, warn) == null {
    $theme: set-default($theme, warn, palettes.$orange-palette);
  }

  @if map.get($theme, destructive) == null {
    $theme: set-default($theme, destructive, palettes.$red-palette);
  }

  @if map.get($theme, background) == null {
    $theme: map.merge(
      $theme,
      (
        background: palettes.$background-palette
      )
    );
  }

  @if map.get($theme, elevation) == null {
    $theme: map.merge(
      $theme,
      (
        elevation: palettes.$default-elevation
      )
    );
  }

  @return $theme;
}

@mixin create-variables($theme, $name) {
  $palette: map.get($theme, $name);

  @each $weight, $value in $palette {
    @if type-of($value) != map {
      --#{$name}-color-#{$weight}: #{$value};
    }
  }
}
